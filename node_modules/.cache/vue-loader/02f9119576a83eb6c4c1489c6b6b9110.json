{"remainingRequest":"/Users/jeong7331/projects/GooktoWebFront/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeong7331/projects/GooktoWebFront/src/components/NetworkParser.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeong7331/projects/GooktoWebFront/src/components/NetworkParser.vue","mtime":1590510851839},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IHsgQmxvYlNlcnZpY2VDbGllbnQgfSA9IHJlcXVpcmUoIkBhenVyZS9zdG9yYWdlLWJsb2IiKTsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdOZXR3b3JrUGFyc2VyJywKCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHN0cnVjdHVyZUZpbGUgOiAnJywKICAgICAgICAgICAgdmlydHVhbE5ldHdvcmtGaWxlOiAnJywKICAgICAgICAgICAgcmVxTmFtZTogJycsCiAgICAgICAgICAgIHJlcVRpbWU6ICcnCiAgICAgICAgfQogICAgfSwKCiAgICBtZXRob2RzIDogewogICAgICAgIGhhbmRsZUZpbGVVcGxvYWQxKGZpbGUpIHsgLy8gRmlsZSBIYW5kbGluZyBmb3IgTmV0d29yayBTdHJ1Y3R1cmUgRmlsZQogICAgICAgICAgICB0aGlzLnN0cnVjdHVyZUZpbGUgPSBmaWxlOwogICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlKTsKICAgICAgICB9LAoKICAgICAgICBoYW5kbGVGaWxlVXBsb2FkMihmaWxlKSB7IC8vIEZpbGUgSGFuZGxpbmcgZm9yIFZpcnR1YWwgTmV0d29yayBGaWxlCiAgICAgICAgICAgIHRoaXMudmlydHVhbE5ldHdvcmtGaWxlID0gZmlsZTsKICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7CiAgICAgICAgfSwKICAgICAgICBzZXRSZXFOYW1lKHRleHQpIHsKICAgICAgICAgICAgdGhpcy5yZXFOYW1lID0gdGV4dDsKICAgICAgICAgICAgY29uc29sZS5sb2codGV4dCk7CiAgICAgICAgfSwKICAgICAgICBzZXRSZXFUaW1lKHRpbWUpewogICAgICAgICAgICB0aGlzLnJlcVRpbWUgPSB0aW1lOwogICAgICAgICAgICBjb25zb2xlLmxvZyh0aW1lKTsKICAgICAgICB9LAoKICAgICAgICBzdWJtaXRGaWxlKCkgewogICAgICAgICAgICBpZiAodGhpcy5zdHJ1Y3R1cmVGaWxlICYmIHRoaXMudmlydHVhbE5ldHdvcmtGaWxlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZm91bmQgZmlsZSIpOwoKICAgICAgICAgICAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgICAgICAgICAgLy8gb2JqZWN0IG9mIGtleSB2YWx1ZSBwYWlyCiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCB0aGlzLnN0cnVjdHVyZUZpbGUpOwoKCiAgICAgICAgICAgICAgICAvKgogICAgICAgICAgICAgICAgICAgIE1ha2UgdGhlIHJlcXVlc3QgdG8gdGhlIFBPU1QgL3NpbmdsZS1maWxlIFVSTAogICAgICAgICAgICAgICAgKi8KCiAgICAgICAgICAgICAgICAvLyBFbnRlciB5b3VyIHN0b3JhZ2UgYWNjb3VudCBuYW1lIGFuZCBzaGFyZWQga2V5CiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50ID0gInNpbWlub3V0ZGIiOwogICAgICAgICAgICAgICAgY29uc3Qgc2FzID0gInNlPTIwMjEtMDUtMjEmc3A9cndkbGFjJnN2PTIwMTgtMDMtMjgmc3M9YiZzcnQ9c2NvJnNpZz1ZcEFtUGw5JTJCSkVac1RBZWNhbWJJbDRVWVN3UXFJOWhhQS8zTEZReXlRem8lM0QiOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjb25zdCBibG9iU2VydmljZUNsaWVudCA9IG5ldyBCbG9iU2VydmljZUNsaWVudCgKICAgICAgICAgICAgICAgICAgICBgaHR0cHM6Ly8ke2FjY291bnR9LmJsb2IuY29yZS53aW5kb3dzLm5ldD8ke3Nhc31gCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckNsaWVudCA9IGJsb2JTZXJ2aWNlQ2xpZW50LmdldENvbnRhaW5lckNsaWVudCgnaW5wdXRkYicpOwoKICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSAiSGVsbG8gd29ybGQhIjsKICAgICAgICAgICAgICAgIGNvbnN0IGJsb2JOYW1lID0gdGhpcy5yZXFOYW1lICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgICBjb25zdCBibG9ja0Jsb2JDbGllbnQgPSBjb250YWluZXJDbGllbnQuZ2V0QmxvY2tCbG9iQ2xpZW50KGJsb2JOYW1lKTsKICAgICAgICAgICAgICAgIGJsb2NrQmxvYkNsaWVudC51cGxvYWQodGhpcy5zdHJ1Y3R1cmVGaWxlLCBjb250ZW50Lmxlbmd0aCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygidGhlcmUgYXJlIG5vIGZpbGVzLiIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKfQo="},{"version":3,"sources":["NetworkParser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NetworkParser.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-card\n        class=\"pa-2\"\n        tile\n        shaped\n        style=\"height: 650px; background-color:#F0F8FF; text-align:center;\"\n    >\n    <v-card-title\n    class=\"headline\" style=\"display: inline-block;\">\n        Network Input Parser\n    </v-card-title>\n    <!-- <v-file-input show-size label=\"Choose Network File\"></v-file-input> -->\n\n    <div class=\"container input_params\">\n        <div style=\"font-size:20px\"> Parameters </div>\n        <v-text-field\n            label=\"Request Name\"\n            v-on:change=\"setReqName($event)\"\n        ></v-text-field>\n        <v-text-field\n            label=\"Request Time\"\n            v-on:change=\"setReqTime($event)\"\n        ></v-text-field>\n    </div>\n\n\n    <div class=\"container\" style=\"font-size:20px\">\n        Network Structure XML\n        <div class=\"large-12 medium-12 small-12 cell file_upload\" style=\"font-size:14px; padding: 5px;\">\n            <!-- <label for=\"file1\" ><span>Choose a file&hellip;</span></label> -->\n            <v-file-input\n                \n                color=\"deep-purple accent-4\"\n                counter\n                label=\"Network Structure File\"\n                placeholder=\"Select your file\"\n                prepend-icon=\"mdi-paperclip\"\n                outlined\n                v-on:change=\"handleFileUpload1($event)\"\n                :show-size=\"1000\"\n            >\n                <template v-slot:selection=\"{ index, text }\">\n                    <v-chip\n                        v-if=\"index < 2\"\n                        color=\"deep-blue accent-4\"\n                        dark\n                        label\n                        small\n                    >\n                        {{ text }}\n                    </v-chip>\n\n                    <!-- Display File Size-->\n                    <span\n                        v-else-if=\"index === 2\"\n                        class=\"overline grey--text text--darken-3 mx-2\"\n                    >\n                        +{{ file.length - 2 }} File(s)\n                    </span>\n                </template>\n            </v-file-input>\n        </div>\n    </div>\n\n     <div class=\"container\" style=\"font-size:20px\">\n        Virtual Network XML\n        <div class=\"large-12 medium-12 small-12 cell file_upload\" style=\"font-size:14px; padding:2px\">\n            <v-file-input\n                \n                color=\"deep-purple accent-4\"\n                counter\n                label=\"Virtual Network File\"\n                placeholder=\"Select your file\"\n                prepend-icon=\"mdi-paperclip\"\n                outlined\n                v-on:change=\"handleFileUpload2($event)\"\n                :show-size=\"1000\"\n            >\n                <template v-slot:selection=\"{ index, text }\">\n                    <v-chip\n                        v-if=\"index < 2\"\n                        color=\"deep-blue accent-4\"\n                        dark\n                        label\n                        small\n                    >\n                        {{ text }}\n                    </v-chip>\n\n                    <!-- Display File Size-->\n                    <span\n                        v-else-if=\"index === 2\"\n                        class=\"overline grey--text text--darken-3 mx-2\"\n                    >\n                        +{{ file.length - 2 }} File(s)\n                    </span>\n                </template>\n            </v-file-input>\n        </div>\n    </div>\n\n\n    <button class='network_form' v-on:click=\"submitFile()\">Submit</button>\n\n\n    <!-- <simulation-panel/> -->\n    </v-card>\n</template>\n\n\n<script>\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nexport default {\n    name: 'NetworkParser',\n\n    data() {\n        return {\n            structureFile : '',\n            virtualNetworkFile: '',\n            reqName: '',\n            reqTime: ''\n        }\n    },\n\n    methods : {\n        handleFileUpload1(file) { // File Handling for Network Structure File\n            this.structureFile = file;\n            console.log(file);\n        },\n\n        handleFileUpload2(file) { // File Handling for Virtual Network File\n            this.virtualNetworkFile = file;\n            console.log(file);\n        },\n        setReqName(text) {\n            this.reqName = text;\n            console.log(text);\n        },\n        setReqTime(time){\n            this.reqTime = time;\n            console.log(time);\n        },\n\n        submitFile() {\n            if (this.structureFile && this.virtualNetworkFile) {\n                console.log(\"found file\");\n\n                let formData = new FormData();\n                // object of key value pair\n                formData.append('file', this.structureFile);\n\n\n                /*\n                    Make the request to the POST /single-file URL\n                */\n\n                // Enter your storage account name and shared key\n                const account = \"siminoutdb\";\n                const sas = \"se=2021-05-21&sp=rwdlac&sv=2018-03-28&ss=b&srt=sco&sig=YpAmPl9%2BJEZsTAecambIl4UYSwQqI9haA/3LFQyyQzo%3D\";\n                \n                const blobServiceClient = new BlobServiceClient(\n                    `https://${account}.blob.core.windows.net?${sas}`\n                );\n\n                const containerClient = blobServiceClient.getContainerClient('inputdb');\n\n                const content = \"Hello world!\";\n                const blobName = this.reqName + new Date().getTime();\n                const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n                blockBlobClient.upload(this.structureFile, content.length);\n            } else {\n                console.log(\"there are no files.\");\n            }\n        }\n    },\n}\n</script>"]}]}