{"remainingRequest":"/Users/jeong7331/projects/GooktoWebFront/node_modules/babel-loader/lib/index.js!/Users/jeong7331/projects/GooktoWebFront/node_modules/eslint-loader/index.js??ref--13-0!/Users/jeong7331/projects/GooktoWebFront/src/utils/blob_upload.js","dependencies":[{"path":"/Users/jeong7331/projects/GooktoWebFront/src/utils/blob_upload.js","mtime":1590114124959},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2plb25nNzMzMS9wcm9qZWN0cy9Hb29rdG9XZWJGcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CgovL2NvbnN0IHsgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCB9ID0gcmVxdWlyZSgiQGF6dXJlL2lkZW50aXR5Iik7CnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoIkBhenVyZS9zdG9yYWdlLWJsb2IiKSwKICAgIEJsb2JTZXJ2aWNlQ2xpZW50ID0gX3JlcXVpcmUuQmxvYlNlcnZpY2VDbGllbnQ7Cgp2YXIgYWNjb3VudCA9ICJzaW1pbm91dGRiIjsgLy9jb25zdCBkZWZhdWx0QXp1cmVDcmVkZW50aWFsID0gbmV3IERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKTsKCnZhciBibG9iU2VydmljZUNsaWVudCA9IG5ldyBCbG9iU2VydmljZUNsaWVudCgiaHR0cHM6Ly8iLmNvbmNhdChhY2NvdW50LCAiLmJsb2IuY29yZS53aW5kb3dzLm5ldCIpLCAnOURMeFNSamw2YVVDeHl2TWtPL1B2eEs1NVlidFIyOTlXc0lDTHRXdzBkakpCV3N1YTV3MXppV0lNRW9aYUdoZndsVFZ5dTU2QzZyMnA4QndHcjd3bWc9PScpOwp2YXIgY29udGFpbmVyTmFtZSA9ICJpbnB1dGRiIjsKZXhwb3J0IGZ1bmN0aW9uIGJsb2JVcGxvYWQoKSB7CiAgcmV0dXJuIF9ibG9iVXBsb2FkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9ibG9iVXBsb2FkKCkgewogIF9ibG9iVXBsb2FkID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgY29udGFpbmVyQ2xpZW50LCBjb250ZW50LCBibG9iTmFtZSwgYmxvY2tCbG9iQ2xpZW50LCB1cGxvYWRCbG9iUmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbnRhaW5lckNsaWVudCA9IGJsb2JTZXJ2aWNlQ2xpZW50LmdldENvbnRhaW5lckNsaWVudChjb250YWluZXJOYW1lKTsKICAgICAgICAgICAgY29udGVudCA9ICJIZWxsbyB3b3JsZCEiOwogICAgICAgICAgICBibG9iTmFtZSA9ICJuZXdibG9iIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICBibG9ja0Jsb2JDbGllbnQgPSBjb250YWluZXJDbGllbnQuZ2V0QmxvY2tCbG9iQ2xpZW50KGJsb2JOYW1lKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgIHJldHVybiBibG9ja0Jsb2JDbGllbnQudXBsb2FkKGNvbnRlbnQsIGNvbnRlbnQubGVuZ3RoKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHVwbG9hZEJsb2JSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJVcGxvYWQgYmxvY2sgYmxvYiAiLmNvbmNhdChibG9iTmFtZSwgIiBzdWNjZXNzZnVsbHkiKSwgdXBsb2FkQmxvYlJlc3BvbnNlLnJlcXVlc3RJZCk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX2Jsb2JVcGxvYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/jeong7331/projects/GooktoWebFront/src/utils/blob_upload.js"],"names":["require","BlobServiceClient","account","blobServiceClient","containerName","blobUpload","containerClient","getContainerClient","content","blobName","Date","getTime","blockBlobClient","getBlockBlobClient","upload","length","uploadBlobResponse","console","log","requestId"],"mappings":";;;AAAA;eAC8BA,OAAO,CAAC,qBAAD,C;IAA7BC,iB,YAAAA,iB;;AAER,IAAMC,OAAO,GAAG,YAAhB,C,CACA;;AAEA,IAAMC,iBAAiB,GAAG,IAAIF,iBAAJ,mBACbC,OADa,6BAExB,0FAFwB,CAA1B;AAKA,IAAME,aAAa,GAAG,SAAtB;AAEA,gBAAsBC,UAAtB;AAAA;AAAA;;;;;0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,eADD,GACmBH,iBAAiB,CAACI,kBAAlB,CAAqCH,aAArC,CADnB;AAGCI,YAAAA,OAHD,GAGW,cAHX;AAICC,YAAAA,QAJD,GAIY,YAAY,IAAIC,IAAJ,GAAWC,OAAX,EAJxB;AAKCC,YAAAA,eALD,GAKmBN,eAAe,CAACO,kBAAhB,CAAmCJ,QAAnC,CALnB;AAAA;AAAA,mBAM4BG,eAAe,CAACE,MAAhB,CAC/BN,OAD+B,EAE/BA,OAAO,CAACO,MAFuB,CAN5B;;AAAA;AAMCC,YAAAA,kBAND;AAULC,YAAAA,OAAO,CAACC,GAAR,6BACuBT,QADvB,oBAEEO,kBAAkB,CAACG,SAFrB;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["//const { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"siminoutdb\";\n//const defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  '9DLxSRjl6aUCxyvMkO/PvxK55YbtR299WsICLtWw0djJBWsua5w1ziWIMEoZaGhfwlTVyu56C6r2p8BwGr7wmg=='\n);\n\nconst containerName = \"inputdb\";\n\nexport async function blobUpload() {\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n\n  const content = \"Hello world!\";\n  const blobName = \"newblob\" + new Date().getTime();\n  const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n  const uploadBlobResponse = await blockBlobClient.upload(\n    content,\n    content.length\n  );\n  console.log(\n    `Upload block blob ${blobName} successfully`,\n    uploadBlobResponse.requestId\n  );\n}\n"]}]}