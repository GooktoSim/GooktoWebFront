{"remainingRequest":"/Users/jeong7331/projects/GooktoWebFront/node_modules/babel-loader/lib/index.js!/Users/jeong7331/projects/GooktoWebFront/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jeong7331/projects/GooktoWebFront/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeong7331/projects/GooktoWebFront/src/components/NetworkParser.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeong7331/projects/GooktoWebFront/src/components/NetworkParser.vue","mtime":1590114156149},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeong7331/projects/GooktoWebFront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFNpbXVsYXRpb25QYW5lbCBmcm9tICcuL1NpbXVsYXRpb25QYW5lbC52dWUnOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwppbXBvcnQgYmxvYlVwbG9hZCBmcm9tICcuLi91dGlscy9ibG9iX3VwbG9hZC5qcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnTmV0d29ya1BhcnNlcicsCiAgY29tcG9uZW50czogewogICAgU2ltdWxhdGlvblBhbmVsOiBTaW11bGF0aW9uUGFuZWwKICB9LAogIG1ldGhvZHM6IHsKICAgIGhhbmRsZUZpbGVVcGxvYWQ6IGZ1bmN0aW9uIGhhbmRsZUZpbGVVcGxvYWQoKSB7CiAgICAgIHRoaXMuZmlsZSA9IHRoaXMuJHJlZnMuZmlsZS5maWxlc1swXTsKICAgIH0sCiAgICBzdWJtaXRGaWxlOiBmdW5jdGlvbiBzdWJtaXRGaWxlKCkgewogICAgICBpZiAodGhpcy5maWxlKSB7CiAgICAgICAgY29uc29sZS5sb2coImZvdW5kIGZpbGUiKTsKICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsgLy8gb2JqZWN0IG9mIGtleSB2YWx1ZSBwYWlyCgogICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIHRoaXMuZmlsZSk7IC8vZmlsZSBmb3JtYXQgY29uZmlndXJhdGlvbnMgY2FuIGJlIG1hZGUgaGVyZQoKICAgICAgICB2YXIgYXhpb3NDb25maWcgPSB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicsCiAgICAgICAgICAgICdBY2NlcHQnOiAnKicsCiAgICAgICAgICAgICJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4iOiAiKiIsCiAgICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJzogJ0dFVCwgUE9TVCwgUEFUQ0gsIFBVVCwgREVMRVRFLCBPUFRJT05TJywKICAgICAgICAgICAgIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMiOiAiKiIsCiAgICAgICAgICAgICJBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyI6IHRydWUKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIC8qCiAgICAgICAgICAgIE1ha2UgdGhlIHJlcXVlc3QgdG8gdGhlIFBPU1QgL3NpbmdsZS1maWxlIFVSTAogICAgICAgICovCgogICAgICAgIGJsb2JVcGxvYWQoKTsgLy8gaHR0cHM6Ly9zaW1pbm91dGRiLmJsb2IuY29yZS53aW5kb3dzLm5ldC9pbnB1dGRiCgogICAgICAgIGF4aW9zLnB1dCgnaHR0cHM6Ly9zaW1pbm91dGRiLmJsb2IuY29yZS53aW5kb3dzLm5ldC9pbnB1dGRiJywgZm9ybURhdGEsIGF4aW9zQ29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgY29uc29sZS5sb2coIlN1Y2Nlc3MhIik7CiAgICAgICAgICBjb25zb2xlLmxvZyh7CiAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZQogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyh7CiAgICAgICAgICAgIGVycm9yOiBlcnJvcgogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coInRoZXJlIGFyZSBubyBmaWxlcy4iKTsKICAgICAgfQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZpbGU6ICcnCiAgICB9OwogIH0KfTs="},{"version":3,"sources":["NetworkParser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAA,eAAA,MAAA,uBAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,yBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,eAAA,EAAA;AADA,GAFA;AAKA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,8BACA;AACA,WAAA,IAAA,GAAA,KAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,KAHA;AAIA,IAAA,UAJA,wBAIA;AACA,UAAA,KAAA,IAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AAEA,YAAA,QAAA,GAAA,IAAA,QAAA,EAAA,CAHA,CAIA;;AACA,QAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAAA,KAAA,IAAA,EALA,CAQA;;AACA,YAAA,WAAA,GAAA;AACA,UAAA,OAAA,EAAA;AACA,4BAAA,YADA;AAEA,sBAAA,GAFA;AAGA,2CAAA,GAHA;AAIA,4CAAA,wCAJA;AAKA,4CAAA,GALA;AAMA,gDAAA;AANA;AADA,SAAA;AAWA;;;;AAIA,QAAA,UAAA,GAxBA,CA0BA;;AACA,QAAA,KAAA,CAAA,GAAA,CAAA,kDAAA,EACA,QADA,EACA,WADA,EAEA,IAFA,CAEA,UAAA,QAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA;AACA,SALA,EAMA,KANA,CAMA,UAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AACA,SARA;AASA,OApCA,MAoCA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,qBAAA;AACA;AACA;AA5CA,GALA;AAmDA,EAAA,IAnDA,kBAmDA;AACA,WAAA;AACA,MAAA,IAAA,EAAA;AADA,KAAA;AAGA;AAvDA,CAAA","sourcesContent":["<template>\n    <v-card\n        class=\"pa-2\"\n        tile\n        shaped\n        style=\"height: 650px; background-color:#F0F8FF;\"\n    >\n    <v-card-title\n    class=\"headline\">\n        Network Input Parser  \n    </v-card-title>\n    <v-file-input show-size label=\"Choose Network File\"></v-file-input>\n\n\n    <div class=\"container\">\n        <div class=\"large-12 medium-12 small-12 cell\">\n        <label>File\n            <input type=\"file\" id=\"file\" ref=\"file\" v-on:change=\"handleFileUpload()\"/>\n        </label>\n            <button v-on:click=\"submitFile()\">Submit</button>\n        </div>\n    </div>\n\n    <simulation-panel/>\n    </v-card>\n</template>\n\n\n<script>\nimport SimulationPanel from './SimulationPanel.vue'\nimport axios from 'axios'\nimport blobUpload from '../utils/blob_upload.js'\n\nexport default {\n    name: 'NetworkParser',\n    components: {\n        SimulationPanel\n    },\n    methods : {\n        handleFileUpload() {\n            this.file = this.$refs.file.files[0];\n        },\n        submitFile() {\n            if (this.file) {\n                console.log(\"found file\");\n\n                let formData = new FormData();\n                // object of key value pair\n                formData.append('file', this.file);\n\n\n                //file format configurations can be made here\n                let axiosConfig = {\n                    headers: {\n                        'Content-Type': 'text/plain',\n                        'Accept': '*',\n                        \"Access-Control-Allow-Origin\" : \"*\",\n                        'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\n                        \"Access-Control-Allow-Headers\": \"*\",\n                        \"Access-Control-Allow-Credentials\" : true\n                    }\n                };\n\n                /*\n                    Make the request to the POST /single-file URL\n                */\n\n               blobUpload();\n\n                // https://siminoutdb.blob.core.windows.net/inputdb\n                axios.put( 'https://siminoutdb.blob.core.windows.net/inputdb',\n                    formData, axiosConfig\n                ).then(response => {\n                    console.log(\"Success!\");\n                    console.log({ response });\n                }\n                ).catch(error => {\n                    console.log({ error });\n                });\n            } else {\n                console.log(\"there are no files.\");\n            }\n        }\n    },\n    data() {\n        return {\n            file : ''\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components"}]}